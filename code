

#include "vex.h"

// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name]               [Type]        [Port(s)]
// Drivetrain           drivetrain    7, 10           
// conveyor             motor_group   6, 11           
// ConveyorbeltMotor    motor         1               
// Controller1          controller                    
// ForwardReverseMotor  motor         2               
// LeftDriveMotor       motor         3               
// RightDriveMotor      motor         4               
// ---- END VEXCODE CONFIGURED DEVICES ----


using namespace vex;


// A global instance of competition
competition Competition;


// define your global instances of motors and other devices here

void pre_auton(void) {
 // Initializing Robot Configuration. DO NOT REMOVE!
 vexcodeInit();



 // All activities that occur before the competition starts
 // Example: clearing encoders, setting servo positions, ...
}



void autonomous(void) {
 Drivetrain.driveFor(reverse, 200, mm);
 conveyor.spin(forward, 20, velocityUnits::pct);
 wait(1, seconds);
}



void usercontrol(void) { 
  while (1){
    
  if(Controller1.ButtonUp.pressing()){
  conveyor.spin(reverse,100, pct);
  LeftDriveMotor.spin(forward, 100, pct);
  RightDriveMotor.spin(forward, 100, pct);}
     
  else if(Controller1.ButtonLeft.pressing()){
  RightDriveMotor.spin(forward, 100, pct);
  LeftDriveMotor.spin(reverse, 100, pct);}

  else if(Controller1.ButtonRight.pressing()){
  RightDriveMotor.spin(reverse, 100,pct);
  LeftDriveMotor.spin(forward, 100, pct);}

  else if(Controller1.ButtonDown.pressing()){
  conveyor.spin(forward, 100, pct);
  LeftDriveMotor.spin(reverse, 100, pct);
  RightDriveMotor.spin(reverse, 100, pct);}

  else if(Controller1.ButtonA.pressing())
  ConveyorbeltMotor.spin(forward, 100, pct);

  else if(Controller1.ButtonB.pressing())
  ConveyorbeltMotor.spin(reverse, 100, pct);


    wait(5, msec);
                    
  }
}


int main() {
 Competition.autonomous(autonomous);
 Competition.drivercontrol(usercontrol);


 pre_auton();
 

 // Prevent main from exiting with an infinite loop.
 while (true) {
   wait(100, msec);
 }
}
